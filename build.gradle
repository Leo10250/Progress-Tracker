import com.github.spotbugs.snom.SpotBugsTask

plugins {
	id 'java'
    id 'jacoco'
    id 'checkstyle'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.hibernate.orm' version '6.6.15.Final'
	id 'org.graalvm.buildtools.native' version '0.10.6'
	id 'com.github.spotbugs' version '6.0.14'
}

group = 'com.progressTracker'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

jacoco {
    toolVersion = '0.8.11'
}

checkstyle {
    toolVersion = '10.12.0'
    configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
    sourceSets = [ sourceSets.main, sourceSets.test ]
}

spotbugs {
	toolVersion = '4.8.5'   // SpotBugs engine version
	effort      = 'max'     // min | default | max   → max = slowest, most rules
	reportLevel = 'medium'     // high | medium | low   → fail threshold

	// Example: turn off a specific detector everywhere
	omitVisitors = ['FindReturnRef']
}



configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {

}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	// implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	// implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	implementation 'org.apache.commons:commons-lang3'
	compileOnly 'com.github.spotbugs:spotbugs-annotations:4.8.5'
	spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
}

hibernate {
	enhancement {
		enableAssociationManagement = true
	}
}

tasks.test {
	useJUnitPlatform()
    finalizedBy tasks.jacocoTestReport
}

tasks.jacocoTestReport {
    // ensure tests ran first
    dependsOn tasks.test

    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}


tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required.set(false)
        html.required.set(true)
    }
}

tasks.withType(SpotBugsTask).configureEach {
	reports {
		html.required.set(true)
		xml.required.set(false)
	}
	excludeFilter = file("$rootDir/config/spotbugs/exclude.xml")
}

tasks.named('spotbugsAot') { enabled = false }
# .github/workflows/pr-check.yml
permissions:
  contents: read # for checkout/build
  issues: write # to call the issues API
  pull-requests: write # to call the pull_requests API

name: PR Check

on:
  pull_request:
    branches: [main] # adapt if you use a different default branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1) Fetch code â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - uses: actions/checkout@v4

      # 2) JDK 21 + Gradle cache (Temurin) â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          cache: gradle # <-- re-uses ~/.gradle caches between runs

      # 3) Lint first â€“ but *capture* the exit code so the job can still finish
      - name: Run Checkstyle
        id: checkstyle # weâ€™ll look at this id later
        shell: bash
        run: |
          set +e                       # (1) donâ€™t abort the shell immediately
          ./gradlew --no-daemon \
              checkstyleMain checkstyleTest
          echo "checkstyle_exit=$?" >> "$GITHUB_OUTPUT"

      # 4) Build, unit-test, Jacoco  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Build & test
        run: ./gradlew clean build --no-daemon

      # 5) Always upload unit-test xml/html â‡¢ PR Artifacts
      - name: Upload unit-test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: build/reports/tests/

      # 6) Always upload Checkstyle reports (html + xml)
      - name: Upload Checkstyle reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-reports
          path: |
            build/reports/checkstyle/*.html
            build/reports/checkstyle/*.xml

            # 7) Generate coverage and capture it
      - name: Generate coverage and capture it
        id: coverage
        shell: bash
        run: |
          # 1) produce the XML
          ./gradlew jacocoTestReport --no-daemon

          # 2) grab just the <counter type="LINE" â€¦/> line
          LINE_TAG=$(grep 'counter.*type="LINE"' build/reports/jacoco/test/jacocoTestReport.xml)

          # 3) parse missed & covered to compute %
          COVERAGE=$(echo "$LINE_TAG" \
            | awk -F'"' '{ missed=$4; covered=$6;
                           total = missed + covered;
                           if (total==0) printf "0.00";
                           else printf "%.2f", covered*100/total }')

          # 4) expose it and write to the check-run summary
          echo "coverage=${COVERAGE}" >> "$GITHUB_OUTPUT"
          echo "### Code coverage: ${COVERAGE}%" >> "$GITHUB_STEP_SUMMARY"

      # 8) Post that coverage as a PR comment
      - name: Post code-coverage to PR
        uses: peter-evans/create-or-update-comment@v4
        if: success()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ðŸ§ª **Code Coverage**
            Current code coverage is **${{ steps.coverage.outputs.coverage }}%**.

      # 8) Finally, **fail the job** if Checkstyle produced any violations
      - name: Fail if Checkstyle failed
        if: steps.checkstyle.outputs.checkstyle_exit != '0'
        run: |
          echo "Checkstyle violations detected â€“ see the uploaded HTML report." >&2
          exit 1

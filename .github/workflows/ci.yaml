# .github/workflows/ci.yml
name: CI

permissions:
  contents: read
  pull-requests: write
  issues: write

on:
  push:
    branches: [main]          # run after every merge to main
  pull_request:
    branches: [main]          # run for every PR targeting main

jobs:
  # 1) LINT -------------------------------------------------------------------
  lint:
    name: üìù Checkstyle
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: temurin
          cache: gradle

      - name: Run Checkstyle
        id: run-checkstyle
        shell: bash
        run: |
          set +e                               # keep going to upload report
          ./gradlew --no-daemon \
            checkstyleMain checkstyleTest
          ec=$?
          echo "exit_code=${ec}" >> "$GITHUB_OUTPUT"
          exit $ec                             # fail job if violations found

      - name: Upload Checkstyle reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-reports
          path: build/reports/checkstyle/*

  # 2) BUILD & UNIT TESTS ------------------------------------------------------
  build-test:
    name: üõ†Ô∏è Build & Unit Tests
    runs-on: ubuntu-latest
    needs: lint                                 # wait until lint job finishes

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: temurin
          cache: gradle

      - name: Build and run tests
        run: ./gradlew clean build --no-daemon

      - name: Upload unit-test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: build/reports/tests/

  # 3) COVERAGE & GATE ---------------------------------------------------------
  coverage:
    name: üìä Code Coverage
    runs-on: ubuntu-latest
    needs: build-test                           # compile & test first

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: temurin
          cache: gradle

      # ----- generate Jacoco report ------------------------------------------
      - name: Generate coverage report
        run: ./gradlew jacocoTestReport --no-daemon

      # ----- extract overall LINE coverage % ---------------------------------
      - name: Extract coverage %
        id: extract
        shell: bash
        run: |
          line=$(grep -oP '<counter[^>]*type="LINE"[^>]*/>' \
                 build/reports/jacoco/test/jacocoTestReport.xml | tail -1)
          missed=$(grep -oP 'missed="\K[0-9]+'  <<< "$line")
          covered=$(grep -oP 'covered="\K[0-9]+' <<< "$line")
          total=$((missed + covered))
          pct=$(awk -v c="$covered" -v t="$total" 'BEGIN{printf "%.2f",c*100/t}')
          echo "pct=$pct" >> "$GITHUB_OUTPUT"
          echo "### Code coverage: ${pct}% " >> "$GITHUB_STEP_SUMMARY"

      # ----- locate any existing bot coverage comment -------------------------
      - name: Find existing coverage comment
        id: find_cov
        uses: peter-evans/find-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: '<!-- code-coverage-comment -->'

      # ----- delete the old comment if it exists ------------------------------
      - name: Delete old coverage comment
        if: steps.find_cov.outputs.comment-id != ''
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              comment_id: Number(process.env.COVERAGE_COMMENT_ID)
            });
        env:
          COVERAGE_COMMENT_ID: ${{ steps.find_cov.outputs.comment-id }}

      # ----- post a fresh coverage comment ------------------------------------
      - name: üí¨ Post new coverage comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            <!-- code-coverage-comment -->
            üß™ **Code Coverage**

            Current line coverage: **${{ steps.extract.outputs.pct }}%**

            ${{ fromJson(steps.extract.outputs.pct) < 80 && '‚ö†Ô∏è Below required 80 %' || '‚úÖ Meets required 80 %+' }}

      # ----- enforce the 80 % gate (main & PRs into main) ----------------------
      - name: Enforce 80 % threshold
        shell: bash
        run: |
          pct=${{ steps.extract.outputs.pct }}
          if [[ ("${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main") \
             || ("${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.base.ref }}" == "main") ]]; then
            if (( $(echo "$pct < 80" | bc -l) )); then
              echo "Coverage $pct % is below the required 80 %." >&2
              exit 1
            fi
          fi
